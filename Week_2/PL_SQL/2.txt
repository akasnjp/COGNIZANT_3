DECLARE
    -- Exception declarations
    insufficient_funds EXCEPTION;
    employee_not_found EXCEPTION;
    customer_exists EXCEPTION;

    -- Variables for transfer funds procedure
    v_balance_from NUMBER;
    v_balance_to NUMBER;

    -- Variables for update salary procedure
    v_salary employees.salary%TYPE;

BEGIN
    -- Procedure 1: SafeTransferFunds
    DECLARE
        p_from_account_id NUMBER := 1; -- Example value
        p_to_account_id NUMBER := 2; -- Example value
        p_amount NUMBER := 500; -- Example value
    BEGIN
        -- Fetch the balance of the source account
        SELECT balance INTO v_balance_from
        FROM accounts
        WHERE account_id = p_from_account_id;

        -- Check if the source account has sufficient funds
        IF v_balance_from < p_amount THEN
            RAISE insufficient_funds;
        END IF;

        -- Deduct the amount from the source account
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;

        -- Add the amount to the destination account
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;

        -- Commit the transaction
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('Transfer completed successfully.');

    EXCEPTION
        WHEN insufficient_funds THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the source account.');
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred during the transfer.');
    END;

    -- Procedure 2: UpdateSalary
    DECLARE
        p_employee_id NUMBER := 1; -- Example value
        p_percentage NUMBER := 10; -- Example value
    BEGIN
        -- Fetch the current salary of the employee
        SELECT salary INTO v_salary
        FROM employees
        WHERE employee_id = p_employee_id;

        -- Update the salary
        UPDATE employees
        SET salary = salary + (salary * p_percentage / 100)
        WHERE employee_id = p_employee_id;

        -- Commit the transaction
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('Salary updated successfully.');

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: Employee ID ' || p_employee_id || ' does not exist.');
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred while updating the salary.');
    END;

    -- Procedure 3: AddNewCustomer
    DECLARE
        p_customer_id NUMBER := 1; -- Example value
        p_customer_name VARCHAR2(100) := 'John Doe'; -- Example value
        p_age NUMBER := 30; -- Example value
        p_balance NUMBER := 5000; -- Example value
    BEGIN
        -- Insert the new customer
        INSERT INTO customers (customer_id, customer_name, age, balance)
        VALUES (p_customer_id, p_customer_name, p_age, p_balance);

        -- Commit the transaction
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('New customer added successfully.');

    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: A customer with ID ' || p_customer_id || ' already exists.');
        WHEN OTHERS THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: An unexpected error occurred while adding the new customer.');
    END;

END;
/