Singly Linked List:

Structure: Each node contains data and a reference (or pointer) to the next node in the sequence.
Traversal: Can only be traversed in one direction (from the head to the tail)

Doubly Linked List:

Structure: Each node contains data, a reference to the next node, and a reference to the previous node.
Traversal: Can be traversed in both directions (from head to tail and tail to head)

Time Complexity
Add: O(n) - Traversing to the end of the list to add a new node.
Search: O(n) - Linear search to find a node.
Traverse: O(n) - Traversing all nodes.
Delete: O(n) - Searching for a node and updating links.
Advantages of Linked Lists over Arrays
Dynamic Size: Linked lists can grow and shrink dynamically without the need for resizing or reallocating memory.
Efficient Insertions/Deletions: Insertions and deletions can be more efficient (O(1)) when the node position is known, as they don't require shifting elements as in arrays.
No Wasted Space: Linked lists do not allocate extra memory if not needed, unlike arrays which may have unused capacity.